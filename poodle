#!/usr/bin/php
<?php
$f = getcwd();

if($command = param(1)){
    /**
     * 'init' command.
     */
    if($command == 'init'){
        if(file_exists($f . '/version.php')){
            echo 'Fatal: A plugin already exists in this folder';
            exit(1);
        }

        $type 			 = param(2);
        $pluginname 	 = param(3);
        $exhibition_name = param(4);

        if(!$type){
            echo 'Fatal: Your plugin must specify a type';
            exit(1);
        }

        if(!$pluginname){
            echo 'Fatal: Your plugin must have a name';
            exit(1);
        }

        $component_name = $type . '_' . $pluginname;


        $exhibition_name = $exhibition_name ? $exhibition_name : $component_name;

        $author = readline('Enter your name: ');
        $email  = readline('Enter your e-mail:');

        $json = fopen('poodle.json','w');
        fwrite($json,json_encode([
            'author' => [
                'name' => $author,
                'email' => $email,
            ],
            'component_name' => $component_name

        ]));
        fclose($json);

        $file = fopen('version.php', 'w');
        $current_year = date('Y');
        $version_str = "<?php
/**
 * @package     $component_name
 * @copyright   $current_year, $author <$email>
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

defined('MOODLE_INTERNAL') || die();

";
        $version_str .= '$plugin->version   = ' . date('Y') . date('m') . date('d') . '01' . ";\n";
        $version_str .= '$plugin->requires  = 2019021500' . ";\n";
        $version_str .= '$plugin->cron      = 0' . ";\n";
        $version_str .= '$plugin->component = ' . "'$component_name'" . ";\n";
        $version_str .= '$plugin->maturity  = MATURITY_ALPHA' . ";\n";
        $version_str .= '$plugin->release   = \'v0.0.1\'' . ";\n";

        fwrite($file, $version_str);
        fclose($file);

        mkdir($f . '/lang/en', 0777, true);
        $file = fopen($f . "/lang/en/$component_name.php",'w');

        $lang_str = '<?php
$string[\'pluginname\'] = ' . "'$exhibition_name'" . ";\n";
        fwrite($file, $lang_str);
        fclose($file);

        mkdir($f . '/db');
        fopen($f . '/db/upgrade.php','w');
        fopen($f . '/db/access.php','w');
        fopen($f . '/db/install.php','w');
        fopen($f . '/db/uninstall.php','w');
        fopen($f . '/db/events.php','w');
        fopen($f . '/db/messages.php','w');
        fopen($f . '/db/services.php','w');
        fopen($f . '/db/renamedclasses.php','w');

        mkdir($f . '/classes', 0777);
        mkdir($f . '/cli', 0777);

        fopen($f . '/settings.php', 'w');
        fopen($f . '/readme_moodle.txt', 'w');
        // fopen($f . '/README.md', 'w');

        echo 'Message: Moodle plugin successfully created';

        exit(0);
    }

    /**
     * Language commands group
     */
    if(param(1) == 'lang'){
        $op = param(2);

        isAPlugin();

        if($op == ''){
            echo 'Fatal: You must specify an operation';
            exit(1);
        }

        /**
         * Add a new language folder and
         */
        if($op == 'add'){
            $json = getPoodleJson();

            $lang_str = file_get_contents($f . '/lang/en/' . $json->component_name . '.php');

            $language = param(3);

            if($language == ''){
                echo 'Fatal: You must specify a language';
                exit(1);
            }

            if(!file_exists($f . "/lang/$language"))
                mkdir($f . "/lang/$language");

            if(!file_exists($f . "/lang/$language/" . $json->component_name . '.php'))
                $file = fopen($f . "/lang/$language/" . $json->component_name . '.php','w');
            else
                $file = fopen($f . "/lang/$language/" . $json->component_name . '.php','+w');

            fwrite($file, $lang_str);
            fclose($file);

            echo 'Message: Language string file successfully created';

            exit(0);
        }
    }

    /**
     * Add a language string
     */
    if(param(1) == 'str'){
		$json = getPoodleJson();

		if($op = param(2)){
			if($op == 'add'){
				if($key = param(3)){
					$key = preg_replace('/\s+/', '', $key);
					// $key = strtolower($key);
					$value = param(4);

					$folders = scandir($f . '/lang');

					foreach($folders as $folder){
						if($folder == '.') continue;
						if($folder == '..') continue;

						$lang_file_name = $f . "/lang/$folder/$json->component_name.php";
						$lang_str = file_get_contents($lang_file_name);


						$file = fopen($lang_file_name,'w');
						fwrite($file, $lang_str . "\n\$string['$key'] = '$value';");
						fclose($file);
					}

					echo "Message: New string key \"$key\" added to locale files";
					exit(0);

				}else{
					echo 'Fatal: You must specify a key value for your locale string';
					exit(1);
				}
			}

			/**
			 * Insert new options for str command here
			 * all options must end in an exit function
			 * passing 1 for error 0 for success
			 *
			 * if no matching option is passed
			 * code will exit with error
			 */

			echo "Fatal: Unknown option \"$op\" for command str";
			exit(1);
		}else{
			echo 'Fatal: You must specify an operation';
			exit(1);
		}
	}

	if(param(1) == 'test'){
		test();
	}
}

/**
 * Test function
 * Test not implemented yet features here 
 * before putting them live to production code
 */
function test(){
	// $json = getPoodleJson();

    echo ':D';
	exit(0);
}

/**
 * Raises a fatal error if this folder is not a Moodle plugin
 */
function isAPlugin()
{
    if(!file_exists($f . '/version.php')){
        echo 'Fatal: Not a Moodle plugin';
        exit(1);
    }
}

/**
 * Raises a fatal error if there is no poodle.json file in folder
 * or returns a associative array based on its contents
 */
function getPoodleJson()
{
    if(!file_exists($f . '/poodle.json')){
        echo 'Fatal: poodle.json is missing.';
        exit(1);
    }

    return json_decode(file_get_contents($f . '/poodle.json'));

}

/**
 * Retrieves a param from command line or empty if not passed
 */
function param($index = 0)
{
	global $argv;
    return isset($argv[$index]) ? $argv[$index] : '';
}